#!/bin/bash
#
# A script to transition an ignition configuration file from a
# cloud-init configuration. This is a hack that overcomes the
# limitation that butane/ignition files do not have first class
# support in Proxmox.
#
# The strategy of using a cloud-init allows any size ignition
# configuration to be placed into a cloud-init configuration
# via the API. It is important that the strategy allows both
# a large document to be set and that it can be automated via
# the Proxmox API to allow the provisioning of cattle. Because
# there are no practical size limitations with this approach
# the ignition configuration can be left in a human readable
# form with whitespace/newlines.
#
# Conditions that must be met outside this script:
#   1. This script must be called from the Proxmox VM 'hookscript'
#   2. An ISO must be written (by Terraform - see proxmox_cloud_init_disk)
#   3. the name of the ISO image must be included in the 'description' field
#      of the VM configuration
#   4. the 'args' parameter of the VM configuration must set the `fw_cfg`
#
# This script will perform the following steps:
#   1. copy the 'meta-data' file from the cloud-init ISO image
#      that is named in the 'description'
#   2. ensure that the VM configuration references the ignition file
#
# This script generates the ignition files in cluster PVE filesystem with the form:
#    /etc/pve/local/ignition/${VM_ID}.ign
# This means that the files should be available across a cluster.
#
# Note: The cloud-init ISO is not associated with a specific VM. This
# means the coordinating script (terraform) can choose to reuse the
# cloud-init for many cattle, or have a ISO file per instance of the VM.
#
# see
# - /usr/share/pve-docs/examples/guest-example-hookscript.pl
#
set -eu

# URL decode a string.
#
# see:
#  - https://stackoverflow.com/a/37840948
function urldecode() { : "${*//+/ }"; echo -e "${_//%/\\x}"; }

function configure()
{
    local VM_ID=$1

    # Get the VM Proxmox config for the VM
    local VM_CONFIG="$(qm config ${VM_ID})"

    # Get the description which is URL encoded (it is the comment in the raw configuration file)
    local DESCRIPTION=$( printf "%s" "${VM_CONFIG}" | sed -ne 's/^description: \(.*\)/\1/gp' )

    # Decode the URL encoded VM description
    local DECODED_DESCRIPTION=$( urldecode "${DESCRIPTION}" )

    # Pull out the reference to the cloud-init storage. It is a string of
    # the form "cloud-init: <storage path>". Some of the tools are putting
    # DOS style CR/LF characters into the description.
    local ISO_STORAGE_PATH=$( printf "%s" "${DECODED_DESCRIPTION}" | tr -s '\r' '\n' | sed -ne 's/^\s*cloud-init:\s*\(.*\)$/\1/gp' )

    if [ -n "${ISO_STORAGE_PATH}" ] ; then
        # Convert the cloud-init storage path to a filesystem path
        local ISO_FILESYSTEM_PATH=$( pvesm path "${ISO_STORAGE_PATH}" )

        if [ -n "${ISO_FILESYSTEM_PATH}" ] ; then
            # Make a temporary directory and mount the cloud-init ISO
            local TEMP_MOUNT=$( mktemp --directory --tmpdir cloud-init.XXXXX )
            mount -o loop -o ro "${ISO_FILESYSTEM_PATH}" "${TEMP_MOUNT}"
            mkdir -p /etc/pve/local/ignition
            cp "${TEMP_MOUNT}/meta-data" "/etc/pve/local/ignition/${VM_ID}.ign"
            umount "${TEMP_MOUNT}"
            rmdir "${TEMP_MOUNT}"

            # Check the fw_cfg argument is set (and points to the ignition configuration written above)
            local FW_CFG=$( printf "%s" "${VM_CONFIG}" | sed -ne 's/^args: .*\(-fw_cfg name=opt\/org.flatcar-linux\/config,file=[^\\ ]*\)/\1/gp' )
            if [ -n "$FW_CFG" ] ; then
                    return # fw_cfg set correctly
            else
                    echo "Error: The VM configuration must have Qemu arguments of -fw_cfg name=opt/org.flatcar-linux/config,file=/etc/pve/local/ignition/${VM_ID}.ign"
                    exit 5
            fi

            exit 0
        else
            echo "Path ${ISO_STORAGE_PATH} can't be evaluated"
            exit 0
        fi
    else
        echo "Cloud init ISO is not referenced in the VM description"
        exit 0
    fi
}

PHASE=$2
if [ "${PHASE}" = 'pre-start' ]; then
        configure $1
elif [ "${PHASE}" = 'post-start' ]; then
        exit 0
elif [ "${PHASE}" = 'pre-stop' ]; then
        exit 0
elif [ "${PHASE}" = 'post-stop' ]; then
        exit 0
else
        echo "Unknown hook script phase ${PHASE}"
        exit 1
fi
